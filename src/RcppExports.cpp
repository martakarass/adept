// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// convolveCpp
NumericVector convolveCpp(const NumericVector a, const NumericVector b);
RcppExport SEXP _adept_convolveCpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(convolveCpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// pmaxIdxCpp
List pmaxIdxCpp(List args);
RcppExport SEXP _adept_pmaxIdxCpp(SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(pmaxIdxCpp(args));
    return rcpp_result_gen;
END_RCPP
}
// slidingCorStoreSdCpp
List slidingCorStoreSdCpp(const NumericVector shortvec, const NumericVector longvec, double sd_shortvec);
RcppExport SEXP _adept_slidingCorStoreSdCpp(SEXP shortvecSEXP, SEXP longvecSEXP, SEXP sd_shortvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type shortvec(shortvecSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type longvec(longvecSEXP);
    Rcpp::traits::input_parameter< double >::type sd_shortvec(sd_shortvecSEXP);
    rcpp_result_gen = Rcpp::wrap(slidingCorStoreSdCpp(shortvec, longvec, sd_shortvec));
    return rcpp_result_gen;
END_RCPP
}
// slidingCorCpp
NumericVector slidingCorCpp(const NumericVector shortvec, const NumericVector longvec, double sd_shortvec, const NumericVector sd_longvec_current);
RcppExport SEXP _adept_slidingCorCpp(SEXP shortvecSEXP, SEXP longvecSEXP, SEXP sd_shortvecSEXP, SEXP sd_longvec_currentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type shortvec(shortvecSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type longvec(longvecSEXP);
    Rcpp::traits::input_parameter< double >::type sd_shortvec(sd_shortvecSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type sd_longvec_current(sd_longvec_currentSEXP);
    rcpp_result_gen = Rcpp::wrap(slidingCorCpp(shortvec, longvec, sd_shortvec, sd_longvec_current));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_adept_convolveCpp", (DL_FUNC) &_adept_convolveCpp, 2},
    {"_adept_pmaxIdxCpp", (DL_FUNC) &_adept_pmaxIdxCpp, 1},
    {"_adept_slidingCorStoreSdCpp", (DL_FUNC) &_adept_slidingCorStoreSdCpp, 3},
    {"_adept_slidingCorCpp", (DL_FUNC) &_adept_slidingCorCpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_adept(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
